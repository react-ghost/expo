apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

group = 'host.exp.exponent'
version = '9.2.0'

buildscript {
  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', '1.4.21')}")
  }
}

// Upload android library to maven with javadoc and android sources
configurations {
  deployerJars
}

// Creating sources with comments
task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

// Put the androidSources and javadoc to the artifacts
artifacts {
  archives androidSourcesJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: mavenLocal().url)
    }
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 30)

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    prefab true
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 30)
    versionCode 24
    versionName "9.2.0"

    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared',
                "-DNODE_MODULES_DIR=${rootDir}/../node_modules"
      }
    }
  }
  lintOptions {
    abortOnError false
  }
  testOptions {
    unitTests.all {
      useJUnitPlatform()
    }
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }
  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  packagingOptions {
    excludes = ["**/libc++_shared.so"]
  }
  configurations {
    extractHeaders
    extractJNI
  }
}

if (new File(rootProject.projectDir.parentFile, 'package.json').exists()) {
  apply from: project(":unimodules-core").file("../unimodules-core.gradle")
} else {
  throw new GradleException(
      "'unimodules-core.gradle' was not found in the usual React Native dependency location. " +
          "This package can only be used in such projects. Are you sure you've installed the dependencies properly?")
}

dependencies {
  // noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'
  unimodule "unimodules-core"
  unimodule 'expo-modules-core'

  compileOnly 'com.facebook.fbjni:fbjni:0.2.2'
  extractHeaders 'com.facebook.fbjni:fbjni:0.2.2:headers'
  extractJNI 'com.facebook.fbjni:fbjni:0.2.2'

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${safeExtGet('kotlinVersion', '1.4.21')}"

  // Newer version introduces dependency versions conflict
  // on 'com.android.support:support-annotations'
  api 'com.google.android.exoplayer:exoplayer:2.9.2'

  api 'com.google.android.exoplayer:extension-okhttp:2.9.2'

  api 'com.yqritc:android-scalablevideoview:1.0.1'

  api "com.squareup.okhttp3:okhttp:3.14.9"
  api "com.squareup.okhttp3:okhttp-urlconnection:3.14.9"

  api "com.android.support:support-annotations:${safeExtGet("supportLibVersion", "29.0.0")}"

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"

  testImplementation 'io.mockk:mockk:1.9'
}

task extractAARHeaders {
  doLast {
    configurations.extractHeaders.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "**/*.h"
      }
    }
  }
}

task extractJNIFiles {
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile
      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.contains('externalNativeBuild')) {
    task.dependsOn(extractAARHeaders)
    task.dependsOn(extractJNIFiles)
  }
}
